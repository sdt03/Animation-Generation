// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid()) @db.Uuid
  name          String?  
  image         String?  
  email         String  @unique
  emailVerified DateTime?

  accounts Account[]
  sessions Session[]
  conversations Conversation[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text 
  access_token      String? @db.Text 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text 
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Conversation {
  id        String     @id @default(uuid()) @db.Uuid
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @db.Uuid
  title     String?
  messages  Message[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  }

model Message {
  id              String       @id @default(uuid()) @db.Uuid
  conversation    Conversation @relation(fields: [conversationId], references: [id])
  conversationId  String       @db.Uuid
  sender          String       // "user" or "llm"
  content         String       // Prompt text or LLM code
  video           Video?
  createdAt       DateTime     @default(now())

}

model Video {
  id        String   @id @default(uuid()) @db.Uuid
  messageId String   @unique @db.Uuid
  message   Message  @relation(fields: [messageId], references: [id])   
  thumbnailUrl String?
  generatedAt DateTime @default(now())
}
