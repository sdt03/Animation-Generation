// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String?  @unique
  displayName String?
  avatarUrl   String?
  phoneNumber String?
  
  // NextAuth required fields (add these)
  name          String?   // NextAuth expects this field
  image         String?   // NextAuth expects this field  
  emailVerified DateTime? // NextAuth expects this field
  
  accounts Account[]
  sessions Session[]
  
  // Status tracking for real-time features
  isOnline    Boolean  @default(false)
  lastSeen    DateTime @default(now())
  
  // Timestamps for auditing
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
}

model Account {
  id                String  @id @default(cuid()) // MISSING - This is required!
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text // Should be Text type for long tokens
  access_token      String? @db.Text // Should be Text type for long tokens
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text // Should be Text type for long tokens
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId]) // Change from @@id to @@unique
}
 
model Session {
  id           String   @id @default(cuid()) // ADD missing id field
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token]) // Change from @@id to @@unique
}